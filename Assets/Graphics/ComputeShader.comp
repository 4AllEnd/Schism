#version 330
#extension GL_ARB_compute_shader : enable
#extension GL_ARB_shading_language_420pack : enable
#extension GL_ARB_explicit_uniform_location : enable
#extension GL_ARB_shader_image_load_store : enable
#extension GL_ARB_shader_storage_buffer_object : enable
#extension GL_ARB_gpu_shader_fp64 : enable
#define lindexsize 32//64 //256 //1280
#define TILESIZE 32
#define CULLPLANENUM 5
#extension GL_NV_sparse_texture : enable
layout (local_size_x = TILESIZE, local_size_y = TILESIZE, local_size_z = 1) in;

uniform layout (location = 0) mat4 proj;
uniform layout (location = 1) mat4 view;
uniform layout (location = 2) mat4 projview;
uniform layout (location = 3) mat4 inv;
uniform layout (binding = 0, rgba16f) image2D COMPOSITE;

uniform layout (binding = 0) sampler2D DIFFUSE;
uniform layout (binding = 1) sampler2D NORMAL;
uniform layout (binding = 2) sampler2D TANGENT;
uniform layout (binding = 3) sampler2D SPECULAR;
uniform layout (binding = 4) sampler2D AMBIENT;
uniform layout (binding = 5) sampler2D POSITION;
uniform layout (binding = 6) sampler2D DEPTH;

struct Light{
	vec4 position, color, direction;
	float attenuation, cutoff, exponent, radius;
	};

vec4 applyfilters(int i){
	//check by bit
	return vec4(i);
}

vec3 thermg(float i){
	i = clamp(0.f, i, 1.f);
	vec3 grad[5] = { { 1.f, 0, 0 }, { .7f, .7f, 0 }, { 0, .7f, .7f }, { 0.f, 0.f, 1.f }, { 0, 0, 0 } };
	vec3 result = mix(grad[4 - int(4.f*i)], grad[3 - int(3.f*i)], i);
	return result;
}

shared uint iseed1 = uint(3);// =  gl_WorkGroupID.z * gl_WorkGroupSize.x * gl_WorkGroupSize.y + gl_WorkGroupID.y * gl_WorkGroupSize.x + gl_WorkGroupID.x + 1;
//float rand(){
//	return abs(sin(radians(atomicAdd(iseed1, 1 + iseed1))));//noise1(atomicAdd(iseed,1));
//}
float rand(){
	uint seed = atomicMax(iseed1, uint(1));
	return float((atomicAdd(iseed1, uint(1664525 * (((seed ^ seed << 13) ^ seed >> 17) ^ seed << 5) + 1013904223)) / 4294967295.f));
}

vec3 lumg(vec3 color){
	return vec3(0, length(color) * .5 + .5 * rand(), 0);
}

float coneang(vec3 dir1, vec3 dir2){
	return abs(acos(dot(dir1, dir2)));///(length(dir1)*length(dir2) better to just normalize outside
	}

float PlaneSDist(vec4 plane, vec3 p){
	return (dot(plane.xyz, p) + plane.w) / length(plane.xyz);
	};

float biasscale = 3.f;
bool intersectscube(vec4 plane[CULLPLANENUM],Light L){
	vec4 lvpos = view * vec4(L.position.xyz,1.f);
	bool inrange = true;
	for(uint f=0;inrange && f < CULLPLANENUM; ++f)inrange = dot(plane[f], vec4(lvpos.xyz, 0.f)) / biasscale >= -L.radius;
	return inrange;
}

vec3 ApplyLight(Light l, vec4 diffuse, vec4 pos, vec4 normal, vec4 specular){
	vec3 dir = l.position.xyz - pos.xyz;
	float dist = length(dir);
	float lamb = dot(dir, normal.xyz);
	vec3 fcolor = vec3(0.f);
	if (lamb > 0.f && dist <= l.radius){
		//if (l.direction.w == 0){//l.LightType== 0)
			//float att = 1.f / (1+pow(dist/l.radius, 2));
			//float att = 1.f / (1.f + l.attenuation*dist);
			//float att = clamp(0.f, 1.f - dist / l.radius, 1.f);
			//vec4 preE = normalize(projview*vec4(1.f));///supposed to only be view
			//vec3 E = preE.xyz/preE.w;
			//vec3 R = reflect(-dir, normal.xyz);
			fcolor = l.color.rgb * diffuse.rgb;
			//+specular.rgb*pow(max(dot(R, E), 0.f), l.exponent);
			//fcolor *= att;
		//	}
			/*
		else if (coneang(l.direction.xyz, normalize(dir)) < l.cutoff){
			//float att = 1.f / (1+pow(dist/l.radius, 2));
			float att = 1.f / (1.f + l.attenuation*dist);
			//float att = clamp(0.0, 1.0 - dist / l.radius, 1.0);
			//vec3 E = normalize(view*vec4(1)).xyz;
			//vec3 R = reflect(-dir, normal.xyz);
			fcolor = vec3(l.color.rgb)*vec3(diffuse.rgb*lamb)*att;//+ specular.rgb*pow(max(dot(R, E), 0.0), l.exponent)
			}
			*/
		}
	return  fcolor;
}
 
shared uint lightIDs[lindexsize], lc = 0;
layout(binding=0, std430) readonly buffer lightlist{//std430 is typical
	Light Lights[];
	};
uint WorkSize = gl_WorkGroupSize.x * gl_WorkGroupSize.y * gl_WorkGroupSize.z;
uint passct = 1 + (Lights.length()) / (WorkSize);
vec2 TS = gl_NumWorkGroups.xy * .5f;
vec2 TB = TS - gl_WorkGroupID.xy;
//Right,Left,Down,Up,Back
vec4 planes[CULLPLANENUM] = {
	normalize(vec4(proj[0][0] * TS.x, 0.0f, 1 - TB.x, 0.0f)),
	normalize(vec4(-proj[0][0] * TS.x, 0.0f, 1 + TB.x, 0.0f)),
	normalize(vec4(0.0f, proj[1][1] * TS.y, 1 - TB.y, 0.0f)),
	normalize(vec4(0.0f, -proj[1][1] * TS.y, 1 + TB.y, 0.0f)),
	vec4(0, 0, -1, 0)
};

void main() {
	barrier();
	for (int i = 0; i < passct; ++i){
		uint LightID = gl_LocalInvocationIndex + WorkSize * i;
		if (LightID < Lights.length() && intersectscube(planes,Lights[LightID])){
			uint a = atomicAdd(lc, 1);
			if (a < lindexsize) lightIDs[a] = LightID;
			}
		}
	barrier();///figured that barriers are better off right before first call; better to have the instances race for completion and wait than to have them ask for performance at the same time.
ivec2 pixel = ivec2(gl_GlobalInvocationID.xy);
float depth = texelFetch(DEPTH, pixel, 0).r;// / log2(far + 1.0)-1.0
vec4 diffuse = texelFetch(DIFFUSE,pixel,0);
vec4 normal = texelFetch(NORMAL,pixel,0);
vec4 specular = texelFetch(SPECULAR, pixel, 0);
vec4 position = texelFetch(POSITION, pixel, 0);
vec3 comp = vec3(diffuse.xyz*.15f);
vec3 pos = position.rgb;
	if(depth < 1){
		//new barrier location
		for(int i=0;i<lc;++i){
			comp += ApplyLight(Lights[lightIDs[i]], diffuse, vec4(pos, 1.f), normal, specular);// clamp(vec4(0), specular, vec4(1))
			}
		}
		else comp=vec3(diffuse.xyz*.5f);
		/*
	if (gl_LocalInvocationID.x > 31 || gl_LocalInvocationID.y > 31|| gl_LocalInvocationID.x <1 || gl_LocalInvocationID.y <1){
		comp += vec3(float(lc) / Lights.length(), 0, 0);////Lights.length()
		//comp = vec3(thermg(float(lc) / 5));////Lights.length()
		//comp+=vec3(0,.1,.1);
		}
		*/
	//comp = vec3(thermg(comp.x+comp.y+comp.z));
	imageStore(COMPOSITE, pixel, vec4(comp.rgb,1));
	}
